import json, re
from fastapi import APIRouter
from fastapi.responses import JSONResponse
from ..routes.request_models import UserRequest
from ..hooks.llm_hook import run_llm
from ..hooks.embedding_hook import get_embedding, is_duplicate_embedding
from ..hooks.supabase_hook import insert_team_memory, get_team_memory   
from ..hooks.llm_hook import run_llm, create_conversational_chain

print("‚úÖ copy_routes carregando...")

router = APIRouter()

CONVERSATIONS = {}

@router.options("/generate_copy")
async def options_generate_copy():
    return JSONResponse(
        content={}, status_code=200,
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "POST, OPTIONS",
            "Access-Control-Allow-Headers": "*",
        },
    )

@router.post("/generate_copy")
async def classify_embedding(request: UserRequest):
    message = request.data
    print(message)
    prompt = f"""
        Voc√™ √© um assistente especializado em marketing digital e an√°lise de prefer√™ncias de comunica√ß√£o.

        Sua tarefa √© analisar mensagens enviadas por usu√°rios e decidir quais partes cont√™m informa√ß√µes
        importantes que devem ser armazenadas no banco de dados de prefer√™ncias da equipe de
        gestores de tr√°fego e marketing.

        ‚ö° O que deve ser considerado relevante para salvar:
        - Informa√ß√µes que descrevem a **identidade da empresa** (ex: "√© uma cervejaria artesanal", "atua no setor agro", "√© uma imobili√°ria de alto padr√£o").
        - Informa√ß√µes sobre **segmento, nicho de mercado, p√∫blico-alvo ou tom de comunica√ß√£o da marca** (ex: "atua no mercado B2B", "usa linguagem formal").
        - Informa√ß√µes que definem **estilo ou diretrizes de comunica√ß√£o permanentes**.

        ‚ùå O que N√ÉO deve ser salvo:
        - Instru√ß√µes tempor√°rias sobre um √∫nico post ou campanha (ex: "fa√ßa uma copy sobre a IPA", "crie uma legenda curta").
        - Dores, solu√ß√µes e CTAs espec√≠ficos de um briefing √∫nico.

        ‚ö†Ô∏è Importante:
        - Mesmo que a mensagem pe√ßa uma copy para um post, se houver junto informa√ß√µes sobre a identidade da empresa, salve apenas essas informa√ß√µes permanentes.
        - Ignore os detalhes transit√≥rios do post.

        üß© Regras obrigat√≥rias de resposta:
        - Sempre responda com **um √∫nico JSON v√°lido**.
        - O campo "relevante" deve ser "coletivo" se a informa√ß√£o for permanente, ou false se n√£o for.
        - O campo "empresa" deve sempre existir (ex: "serrana", "impulse", "cliente", "coletivo").
        - O campo "informacao" deve conter a diretriz ou estar vazio ("").

        üìò Exemplo 1 (mensagem relevante):
        {{
        "relevante": "coletivo",
        "empresa": "serrana",
        "informacao": "usa letras min√∫sculas nas legendas"
        }}

        üìò Exemplo 2 (mensagem n√£o relevante):
        {{
        "relevante": false,
        "empresa": "serrana",
        "informacao": ""
        }}

        Mensagem do usu√°rio:
        {message}
        """



    result = run_llm(prompt, model="gpt-4.1-mini")

    try:
        match = re.search(r"\{.*\}", result, re.DOTALL)
        if not match:
            return {"copy": f"Erro: IA n√£o retornou JSON. {result}"}
        jsonresponse = json.loads(match.group(0))
    except Exception as e:
        return {"copy": f"Erro ao interpretar resposta: {str(e)}"}

    reference = jsonresponse.get("empresa", "").strip().lower()
    relevance = jsonresponse.get("relevante")

    
    if reference not in CONVERSATIONS:
        CONVERSATIONS[reference] = create_conversational_chain(model="gpt-4o-mini", memory_limit=5)
    conversation = CONVERSATIONS[reference]

    if relevance == "coletivo":
        content = jsonresponse.get("informacao")
        embedding = get_embedding(content)
        existing = get_team_memory(reference)

        if not is_duplicate_embedding(embedding, [i["embedding"] for i in existing.data]):
            insert_team_memory(reference, content, embedding)

    bdcontent = get_team_memory(reference)
    res = [item["content"] for item in bdcontent.data] if bdcontent.data else []

    copy_prompt = f"""
    Briefing recebido:
    {message}

    Brifing da Empresa (pode n√£o ter):
    {res}

    üéØ Objetivo Principal
    Criar textos para arte e legendas de an√∫ncios no Instagram que incentivem leads B2B a clicar, cadastrar-se, baixar cat√°logos ou contatar especialistas. Sempre priorize a capta√ß√£o de leads qualificados (lojistas ou decisores com CNPJ).

    ‚úçÔ∏è Metodologia Impulse (Framework Obrigat√≥rio)
    Estrutura o an√∫ncio em 4 etapas sequenciais. Pense passo a passo ao aplicar:
    1. **Identifica√ß√£o do P√∫blico**: Comece com uma chamada que identifique o setor e, se aplic√°vel, a localiza√ß√£o.
    - Geolocalizado: "Setor + Localiza√ß√£o" (ex: "Aten√ß√£o lojista de Curitiba...").
    - Nacional/amplo: Apenas o setor (ex: "Aten√ß√£o lojista de cama, mesa e banho...").
    - Verifique no briefing: Se a localiza√ß√£o n√£o for especificada, assuma nacional e pergunte para confirma√ß√£o se necess√°rio.

    2. **Agito da Dor ou Desejo**: Crie identifica√ß√£o imediata com um problema ou oportunidade latente do p√∫blico B2B. Foque em dores reais como baixo giro de estoque, falta de variedade, aus√™ncia de novidades, ou demandas por qualidade, agilidade e personaliza√ß√£o. Mantenha curto e impactante para gerar urg√™ncia sem drama.
    3. **Apresenta√ß√£o da Solu√ß√£o ou Desejo**: Posicione a marca/produto como solu√ß√£o direta, destacando diferenciais B2B como condi√ß√µes comerciais especiais, qualidade superior, produ√ß√£o nacional, exclusividade para CNPJ, ou prazos de entrega. Enfatize benef√≠cios mensur√°veis (ex: custo-benef√≠cio, exclusividade).
    4. **CTA (Chamada para A√ß√£o)**: Finalize com uma a√ß√£o clara e acion√°vel, como "Cadastre-se e receba o cat√°logo exclusivo para lojistas", "Baixe agora o cat√°logo 2025" ou "Fale com um especialista e garanta sua condi√ß√£o". O CTA deve impulsionar o clique imediato.

    üßæ Estrutura da Entrega
    Sempre responda com exatamente tr√™s blocos separados e rotulados:
    - **Texto da Arte**: Curto, objetivo e de alto impacto visual (ideal para imagem do an√∫ncio, 5-10 linhas no m√°ximo). Use mai√∫sculas para √™nfase se necess√°rio.
    - **Legenda (Texto do Post)**: Mais explicativa, refor√ßando a proposta de valor, conex√£o com o lojista e o CTA (100-200 caracteres). Inclua men√ß√£o a exclusividade para CNPJ no final, se relevante.

    ‚ö†Ô∏è Regras R√≠gidas (N√£o Violem)
    - Nunca use emojis, g√≠rias, linguagem informal ou emotiva (ex: evite "fature alto" se soar exagerado; opte por "aumente suas vendas").
    - Adapte estritamente ao briefing: Identifique setor, localiza√ß√£o, dores, solu√ß√µes e CTA sugeridos. Se o briefing faltar detalhes (ex: localiza√ß√£o), assuma defaults (nacional) e sugira ajustes na resposta.
    - Foco 100% em B2B: Mencione CNPJ sempre que poss√≠vel para qualificar leads.
    - Verifique consist√™ncia: Ap√≥s criar, revise mentalmente se segue o framework Impulse e as regras. Se o briefing for vago, pe√ßa esclarecimentos antes de gerar.

    üß† Processo de Racioc√≠nio para Cada Briefing
    Ao receber um briefing:
    1. Analise: Identifique setor, localiza√ß√£o (geolocalizado ou amplo), dores/desejos, solu√ß√£o da marca e CTA desejado.
    2. Planeje: Mapeie o framework Impulse ao briefing.
    3. Crie: Gere arte e legenda separadas.
    4. Refine: Garanta persuas√£o, clareza e alinhamento B2B.
    5. Entregue: Apenas os dois blocos, sem texto extra a menos que pedido.
    """

    print(f"üìú Tamanho do prompt: {len(copy_prompt)} caracteres")

    try:
        response = conversation.invoke({"input": copy_prompt})
        copy = response["response"] if isinstance(response, dict) and "response" in response else str(response)
    except Exception as e:
        print("‚ùå Erro ao gerar copy:", e)
        return {"copy": f"Erro ao gerar copy: {str(e)}"}

    print(f"üß† Mem√≥ria atual ({reference}): {conversation.memory.buffer}")
    return {"copy": copy}
